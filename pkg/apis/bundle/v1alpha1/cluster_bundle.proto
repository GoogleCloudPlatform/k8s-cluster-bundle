// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pkg.apis.bundle.v1alpha1;

option go_package = "github.com/GoogleCloudPlatform/k8s-cluster-bundle/pkg/apis/bundle/v1alpha1";

import "pkg/apis/bundle/v1alpha1/object_meta.proto";

// The ClusterBundle is a packaging format for Kubernetes Components.
message ClusterBundle {
  // Required. Kubernetes API Version for the Bundle.
  // Must be bundle.gke.io/v1alpha1.
  string api_version = 1;

  // Required. The Kubernetes `kind` for this object. Must be 'ClusterBundle'.
  string kind = 2;

  // Required. Kubernetes ObjectMeta proto. The Metadata.name field must be
  // filled out for each Bundle.
  ObjectMeta metadata = 3;

  // Spec for the ClusterBundle, which specifies the intended Kubernetes cluster
  // configuration.
  ClusterBundleSpec spec = 4;
}

// A spec object that wraps the Cluster Bundle.
message ClusterBundleSpec {
  // The name of the bundle.
  string name = 1;

  // Version-string for this bundle. The version should be a SemVer string (see
  // https://semver.org/) of the form X.Y.Z (Major.Minor.Patch).  Generally
  // speaking, a major-version (changes should indicate breaking changes,
  // minor-versions should indicate backwards compatible features, and patch
  // changes should indicate backwords compatible. If there are any changes to
  // the bundle, then the version string must be incremented.
  //
  // If a bundle is versioned, then all its components must be versioned.
  string version = 2;

  // Kubernetes objects grouped into component packages and versioned together.
  // These could be applications or they could be some sort of supporting
  // object collection.
  repeated ComponentPackageReference components = 3;
}

// ComponentPackageReference is a reference to a specific component.
message ComponentPackageReference {
  // The name of the component.
  string name = 1;

  // The version of the component.
  string version = 2;
}
